// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int next, size;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let size = 0;
        let next = 1;
        let heap[size] = 14335;
        let heap[next] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int objectSize) {
        var Array block, prevBlock, nextBlock;

        let block = heap;
        let prevBlock = 0;

        while (block[size] < objectSize) {
            let prevBlock = block;
            let block = block[next];
            if (block = null) {
                return -1;
            }
        }

        let nextBlock = block + 2 + objectSize;
        let nextBlock[next] = block[next];
        let nextBlock[size] = block[size] - objectSize - 2;

        let block[next] = null;
        let block[size] = objectSize;

        if (prevBlock = 0) {
            let heap = nextBlock;
        } else {
            let prevBlock[next] = nextBlock;
        }

        return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array block;
        let block = o - 2;
        let block[next] = heap;
        let heap = block;
        return;
    }    
}
