// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array twoToThe;

    /** Initializes the library. */
    function void init() {
    	var int i, value;

    	let twoToThe = Array.new(16);
    	let i = 0;
    	let value = 1;

    	while (i < 16) {
    		let twoToThe[i] = value;
    		let i = i + 1;
    		let value = value + value;
    	}

    	return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    	if (x < 0) {
    		return -x;
    	}
    	return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    	var int sum, shiftedX, i, absX, absY;
      var boolean is_negative;

    	let absX = Math.abs(x);
    	let absY = Math.abs(y);
      let is_negative = (x < 0 & y > 0) | (x > 0 & y < 0);

    	let i = 0;
    	let sum = 0;
    	let shiftedX = absX;

    	while (i < 16) {
    		if (Math.is_bit_set(absY, i)) {
    			let sum = sum + shiftedX;
    		}
    		let shiftedX = shiftedX + shiftedX;
    		let i = i + 1;
    	}

      if (is_negative) {
    		return -sum;
    	}
    	return sum;
    }

    function boolean is_bit_set(int n, int bit) {
    	return (twoToThe[bit] & n) > 0;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q, absX, absY;
      var boolean is_negative;

      let absX = Math.abs(x);
      let absY = Math.abs(y);
      let is_negative = (x < 0 & y > 0) | (x > 0 & y < 0);

      if (absY > absX) {
        return 0;
      }

      let q = Math.divide(absX, 2 * absY);
      if ((absX - (2 * q * absY)) < absY) {
        let q = 2 * q;
      } else {
        let q = (2 * q) + 1;
      }

      if (is_negative) {
        return -q;
      }
      return q;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int result, square, t, j;

      let j = 7;

      while (~(j < 0)) {
        let t = result + twoToThe[j];
        let square = t * t;

        if ((square > 0) & ((square < x) | (square = x))) {
          let result = t;
        }
        let j = j - 1;
      }

      return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    	if (a > b) {
    		return a;
    	}
    	return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    	if (a < b) {
    		return a;
    	}
    	return b;
    }
}
