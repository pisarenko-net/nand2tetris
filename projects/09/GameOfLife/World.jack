class World {
	field Array cells, pendingRow, pendingRowPrevious, tempRow;

	constructor World new() {
		let cells = Array.new(32);
		let pendingRow = Array.new(64);
		let pendingRowPrevious = Array.new(64);
		do clear();
		return this;
	}

	method void dispose() {
		var int row;
		var Array currentRow;

		let row = 0;

		while (row < 32) {
			let currentRow = cells[row];
			do currentRow.dispose();
			let row = row + 1;
		}

		do pendingRow.dispose();
		do pendingRowPrevious.dispose();

		do cells.dispose();
		do Memory.deAlloc(this);
		return;
   }

	method void clear() {
		var int row, column;
		var Array currentRow;

		let row = 0;

		while (row < 32) {
			let currentRow = Array.new(64);

			let column = 0;
			while (column < 64) {
				let currentRow[column] = false;
				let column = column + 1;
			}

			let cells[row] = currentRow;
			let row = row + 1;
		}
		return;
	}

	method void transformToNextGeneration() {
		var boolean newValue;
		var int row, column;
		var Array currentRow;

		let row = 0;

		while (row < 32) {
			let column = 0;
			let currentRow = cells[row];

			while (column < 64) {
				let pendingRow[column] = currentRow[column];

				if (shouldCellToggle(row, column)) {
					let newValue = ~(currentRow[column]);
					do applyCellChange(newValue, row, column);
				}
				let column = column + 1;
			}

			do swapRows(row);
			let row = row + 1;
		}

		do swapRowsFinal();
		return;
	}

	method boolean shouldCellToggle(int row, int column) {
		var int neighbours;
		let neighbours = countNeighbours(row, column);

		if (isCellAlive(row, column)) {
			if ((neighbours < 2) | (neighbours > 3)) {
				return true;
			} else {
				return false;
			}
		} else {
			if (neighbours = 3) {
				return true;
			} else {
				return false;
			}
		}
	}

	method int countNeighbours(int row, int column) {
		var int neighbours;
		let neighbours = 0;

		if (row > 0) {
			// north
			if (isCellAlive(row-1, column)) {
				let neighbours = neighbours + 1;
			}
			// NW
			if (column > 0) {
				if (isCellAlive(row-1, column-1)) {
					let neighbours = neighbours + 1;
				}
			}
			// NE
			if (column < 63) {
				if (isCellAlive(row-1, column+1)) {
					let neighbours = neighbours + 1;
				}
			}
		}
		// west
		if (column > 0) {
			if (isCellAlive(row, column-1)) {
				let neighbours = neighbours + 1;
			}
		}
		// east
		if (column < 63) {
			if (isCellAlive(row, column+1)) {
				let neighbours = neighbours + 1;
			}
		}
		if (row < 31) {
			// south
			if (isCellAlive(row+1, column)) {
				let neighbours = neighbours + 1;
			}
			// SW
			if (column > 0) {
				if (isCellAlive(row+1, column-1)) {
					let neighbours = neighbours + 1;
				}
			}
			// SE
			if (column < 63) {
				if (isCellAlive(row+1, column+1)) {
					let neighbours = neighbours + 1;
				}
			}
		}

		return neighbours;
	}

	method boolean isCellAlive(int row, int column) {
		var Array row;
		var boolean currentValue;
		let row = cells[row];
		let currentValue = row[column];
		return currentValue;
	}

	method void applyCellChange(int newValue, int row, int column) {
		let pendingRow[column] = newValue;
		do Screen.setColor(newValue);
		do Screen.drawRectangle(column * 8, row * 8, (column * 8) + 7, (row * 8) + 7);
		return;
	}

	method void swapRows(int row) {
		if (row > 0) {
			let tempRow = cells[row - 1];
			let cells[row - 1] = pendingRowPrevious;
		} else {
			let tempRow = pendingRowPrevious;
		}
		let pendingRowPrevious = pendingRow;
		let pendingRow = tempRow;
		return;
	}

	method void swapRowsFinal() {
		let tempRow = cells[31];
		let cells[31] = pendingRowPrevious;
		let pendingRowPrevious = tempRow;
		return;
	}

	method void toggleCell(int rowNumber, int columnNumber) {
		var boolean currentValue;
		var Array row;

		let row = cells[rowNumber];
		let currentValue = row[columnNumber];
		let currentValue = ~currentValue;
		let row[columnNumber] = currentValue;

		do Screen.setColor(currentValue);
		do Screen.drawRectangle(columnNumber * 8, rowNumber * 8, (columnNumber * 8) + 7, (rowNumber * 8) + 7);

		return;
	}
}