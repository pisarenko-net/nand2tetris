class World {
	field Array cells;

	constructor World new() {
		let cells = Array.new(64);
		do clear();
		return this;
	}

	method void dispose() {
		var int currentRow;
		var Array row;

		let currentRow = 0;

		while (currentRow < 64) {
			let row = cells[currentRow];
			do row.dispose();
			let currentRow = currentRow + 1;
		}

		do cells.dispose();
		do Memory.deAlloc(this);
		return;
   }

	method void clear() {
		var int currentRow, currentColumn;
		var Array row;

		let currentRow = 0;

		while (currentRow < 64) {
			let row = Array.new(128);

			let currentColumn = 0;
			while (currentColumn < 128) {
				let row[currentColumn] = false;
				let currentColumn = currentColumn + 1;
			}

			let cells[currentRow] = row;
			let currentRow = currentRow + 1;
		}
		return;
	}

	method void transformToNextGeneration() {
		var List pendingChanges, pendingChangesPrevious;
		var int currentRow, currentColumn;
		var Array row;
		var boolean areChangesPending, shouldCellToggle;

		let currentRow = 0;

		let pendingChanges = List.new(-1, null);
		let pendingChangesPrevious = List.new(-1, null);

		while (currentRow < 64) {
			let areChangesPending = areChangesPending(pendingChangesPrevious);

			if (areChangesPending) {
				do applyChanges(currentRow - 2, pendingChangesPrevious);
			}
			do pendingChangesPrevious.dispose();
			let pendingChangesPrevious = pendingChanges;
			let pendingChanges = List.new(-1, null);

			let row = cells[currentRow];
			let currentColumn = 0;

			while (currentColumn < 128) {
				let shouldCellToggle = shouldCellToggle(currentRow, currentColumn);
				if (shouldCellToggle) {
					let pendingChanges = List.new(currentColumn, pendingChanges);
				}
				let currentColumn = currentColumn + 1;
			}
			let currentRow = currentRow + 1;
		}

		do applyChanges(currentRow -1, pendingChanges);
		do applyChanges(currentRow - 2, pendingChangesPrevious);

		do pendingChanges.dispose();
		do pendingChangesPrevious.dispose();

		return;
	}

	method boolean areChangesPending(List changedColumns) {
		var boolean isPendingListEmpty;
		let isPendingListEmpty = changedColumns.isEmpty();

		if (isPendingListEmpty) {
			return false;
		} else {
			return true;
		}
	}

	method void applyChanges(int row, List changedColumns) {
		var List currentColumnElement;
		var int currentColumn;

		let currentColumnElement = changedColumns;
		let currentColumn = currentColumnElement.getData();

		while (~(currentColumn = -1)) {
			do toggleCell(row, currentColumn);
			let currentColumnElement = currentColumnElement.getNext();
			let currentColumn = currentColumnElement.getData();
		}
		return;
	}

	method boolean shouldCellToggle(int row, int column) {
		return true;
	}

	method boolean getCell(int row, int column) {
		var Array row;
		var boolean currentValue;
		let row = cells[row];
		let currentValue = row[column];
		return currentValue;
	}

	method void toggleCell(int rowNumber, int columnNumber) {
		var boolean currentValue;
		var Array row;

		let row = cells[rowNumber];
		let currentValue = row[columnNumber];
		let currentValue = ~currentValue;
		let row[columnNumber] = currentValue;

		return;
	}
}