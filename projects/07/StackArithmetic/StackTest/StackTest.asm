// push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A-D
@IF_JEQ_StackTest
D;JEQ
@SP
A=M
A=A-1
M=0
@END_JEQ_StackTest
0;JMP
(IF_JEQ_StackTest)
@SP
A=M
A=A-1
M=-1
(END_JEQ_StackTest)
// push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A-D
@IF_JEQ_StackTest
D;JEQ
@SP
A=M
A=A-1
M=0
@END_JEQ_StackTest
0;JMP
(IF_JEQ_StackTest)
@SP
A=M
A=A-1
M=-1
(END_JEQ_StackTest)
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A-D
@IF_JEQ_StackTest
D;JEQ
@SP
A=M
A=A-1
M=0
@END_JEQ_StackTest
0;JMP
(IF_JEQ_StackTest)
@SP
A=M
A=A-1
M=-1
(END_JEQ_StackTest)
// push constant 892
@892
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A-D
@IF_JLT_StackTest
D;JLT
@SP
A=M
A=A-1
M=0
@END_JLT_StackTest
0;JMP
(IF_JLT_StackTest)
@SP
A=M
A=A-1
M=-1
(END_JLT_StackTest)
// push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 892
@892
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A-D
@IF_JLT_StackTest
D;JLT
@SP
A=M
A=A-1
M=0
@END_JLT_StackTest
0;JMP
(IF_JLT_StackTest)
@SP
A=M
A=A-1
M=-1
(END_JLT_StackTest)
// push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A-D
@IF_JLT_StackTest
D;JLT
@SP
A=M
A=A-1
M=0
@END_JLT_StackTest
0;JMP
(IF_JLT_StackTest)
@SP
A=M
A=A-1
M=-1
(END_JLT_StackTest)
// push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A-D
@IF_JGT_StackTest
D;JGT
@SP
A=M
A=A-1
M=0
@END_JGT_StackTest
0;JMP
(IF_JGT_StackTest)
@SP
A=M
A=A-1
M=-1
(END_JGT_StackTest)
// push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A-D
@IF_JGT_StackTest
D;JGT
@SP
A=M
A=A-1
M=0
@END_JGT_StackTest
0;JMP
(IF_JGT_StackTest)
@SP
A=M
A=A-1
M=-1
(END_JGT_StackTest)
// push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A-D
@IF_JGT_StackTest
D;JGT
@SP
A=M
A=A-1
M=0
@END_JGT_StackTest
0;JMP
(IF_JGT_StackTest)
@SP
A=M
A=A-1
M=-1
(END_JGT_StackTest)
// push constant 57
@57
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 53
@53
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A+D
@SP
A=M
A=A-1
M=D
// push constant 112
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A-D
@SP
A=M
A=A-1
M=D
// neg
@SP
A=M
A=A-1
A=M
D=-A
@SP
A=M
A=A-1
M=D
// and
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=D&A
@SP
A=M
A=A-1
M=D
// push constant 82
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// or
@SP
A=M
A=A-1
A=M
D=A
@SP
M=M-1
A=M
A=A-1
A=M
D=A|D
@SP
A=M
A=A-1
M=D
// not
@SP
A=M
A=A-1
A=M
D=!A
@SP
A=M
A=A-1
M=D
// program end loop
(VERY_END)
@VERY_END
0;JMP
